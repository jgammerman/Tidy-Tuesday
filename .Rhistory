dplyr::filter(episode == 1) %>%
dplyr::slice(1:3)
office_transcripts <- as_tibble(theoffice) %>%
mutate(season = as.integer(season),
episode = as.integer(episode)) %>%
mutate(character = str_remove_all(character, '"')) %>%
mutate(name = str_to_lower(str_remove_all(episode_name, "\\.| \\(Part.*")))
office_ratings <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-17/office_ratings.csv') %>%
mutate(name = str_to_lower(str_remove_all(title, "\\.| \\(Part.*|\\: Part.*")))
office_ratings %>%
mutate(title = fct_inorder(title)) %>%
ggplot(aes(title, imdb_rating)) +
geom_line(group = 1) +
geom_point(aes(color = factor(season))) +
geom_text(aes(label = title), check_overlap = TRUE, hjust=1) +
theme(axis.text.x = element_blank(), panel.grid.major.x = element_blank(),
legend.position = "none")
library(ggrepel)
office_ratings %>%
mutate(title = fct_inorder(title)) %>%
ggplot(aes(title, imdb_rating)) +
geom_line(group = 1) +
geom_point(aes(color = factor(season))) +
geom_text(aes(label = title), check_overlap = TRUE, hjust=1) +
theme(axis.text.x = element_blank(), panel.grid.major.x = element_blank(),
legend.position = "none")
library(ggrepel)
office_ratings %>%
group_by(season) %>%
summarize(avg_rating = mean(imdb_rating)) %>%
ggplot(aes(season, avg_rating)) +
geom_line() +
scale_x_continuous(breaks = 1:9)
office_ratings %>%
mutate(title = fct_inorder(title),
episode_number = row_number()) %>%
ggplot(aes(episode_number, imdb_rating)) +
geom_line() +
geom_smooth() +
geom_point(aes(color = factor(season), size = total_votes)) +
geom_text(aes(label = title), check_overlap = TRUE, hjust = 1) +
expand_limits(x = -10) +
theme(panel.grid.major.x = element_blank(),
legend.position = "none") +
labs(x = "Episode number",
y = "IMDB Rating",
title = "Popularity of The Office episodes over time",
subtitle = "Color represents season, size represents # of ratings")
office_ratings %>%
arrange(desc(imdb_rating)) %>%
mutate(title = paste0(season, ".", episode, " ", title),
title = fct_reorder(title, imdb_rating)) %>%
head(20) %>%
ggplot(aes(title, imdb_rating, color = factor(season), size = total_votes)) +
geom_point() +
coord_flip() +
labs(color = "Season",
title = "Most popular episodes of The Office")
View(office_transcripts)
office_ratings %>%
arrange(desc(imdb_rating)) %>%
mutate(title = paste0(season, ".", episode, " ", title),
title = fct_reorder(title, imdb_rating)) %>%
head(20) %>%
ggplot(aes(title, imdb_rating, color = factor(season), size = total_votes)) +
geom_point() +
coord_flip() +
labs(color = "Season",
title = "Most popular episodes of The Office")
office_transcripts %>%
select(-text_w_direction) %>%
unnest_tokens(word, text)
library(tidytext)
office_transcripts %>%
select(-text_w_direction) %>%
unnest_tokens(word, text)
library(tidytext)
transcript_words <-office_transcripts %>%
select(-text_w_direction) %>%
unnest_tokens(word, text)
transcript_words %>%
count(word, sort =  TRUE)
transcript_words %>%
count(word, sort =  TRUE) %>%
anti_join(stop_words, by = "word")
transcript_words %>%
count(word, sort =  TRUE) %>%
anti_join(stop_words, by = "word") %>%
filter(!word %in% blacklist)
library(tidytext)
transcript_words <-office_transcripts %>%
select(-text_w_direction) %>%
unnest_tokens(word, text)
blacklist <- c("yeah", "hey", "uh", "gonna")
blacklist_characters <- c("Everyone", "All", "Both", "Guy", "Girl", "Group")
transcript_words %>%
count(word, sort =  TRUE) %>%
anti_join(stop_words, by = "word") %>%
filter(!word %in% blacklist)
transcript_words
library(tidytext)
transcript_words <-office_transcripts %>%
select(-text_w_direction) %>%
unnest_tokens(word, text)
transcript_words
blacklist <- c("yeah", "hey", "uh", "gonna")
blacklist_characters <- c("Everyone", "All", "Both", "Guy", "Girl", "Group")
transcript_words <- office_transcripts %>%
group_by(character) %>%
filter(n() >= 100,
n_distinct(episode_name) > 2) %>%
ungroup() %>%
select(-text_w_direction) %>%
unnest_tokens(word, text) %>%
anti_join(stop_words, by = "word") %>%
filter(!word %in% blacklist,
!character %in% blacklist_characters)
blacklist <- c("yeah", "hey", "uh", "gonna")
blacklist_characters <- c("Everyone", "All", "Both", "Guy", "Girl", "Group")
transcript_words <- office_transcripts %>%
group_by(character) %>%
filter(n() >= 100,
n_distinct(episode_name) > 2) %>%
ungroup() %>%
select(-text_w_direction) %>%
unnest_tokens(word, text) %>%
anti_join(stop_words, by = "word") %>%
filter(!word %in% blacklist,
!character %in% blacklist_characters)
transcript_words
character_tf_idf <- transcript_words %>%
add_count(word) %>%
filter(n >= 20) %>%
count(word, character) %>%
bind_tf_idf(word, character, n) %>%
arrange(desc(tf_idf))
character_tf_idf <- transcript_words %>%
add_count(word) %>%
filter(n >= 20) %>%
count(word, character) %>%
bind_tf_idf(word, character, n) %>%
arrange(desc(tf_idf))
character_tf_idf
character_tf_idf %>%
filter(character %in% c("Dwight", "Jim", "David Wallace", "Darryl", "Jan", "Holly")) %>%
group_by(character) %>%
top_n(10, tf_idf) %>%
ungroup() %>%
mutate(word = reorder_within(word, tf_idf, character)) %>%
ggplot(aes(word, tf_idf)) +
geom_col() +
coord_flip() +
scale_x_reordered() +
facet_wrap(~ character, scales = "free_y") +
labs(x = "",
y = "TF-IDF of character-word pairs")
character_tf_idf %>%
filter(character %in% c("Dwight", "Jim", "Michael", "Pam")) %>%
group_by(character) %>%
top_n(10, tf_idf) %>%
ungroup() %>%
mutate(word = reorder_within(word, tf_idf, character)) %>%
ggplot(aes(word, tf_idf)) +
geom_col() +
coord_flip() +
scale_x_reordered() +
facet_wrap(~ character, scales = "free_y") +
labs(x = "",
y = "TF-IDF of character-word pairs")
transcript_words %>%
add_count(word)
character_tf_idf <- transcript_words %>%
add_count(word) %>%
filter(n >= 20) %>%
count(word, character) %>%
bind_tf_idf(word, character, n) %>%
arrange(desc(tf_idf))
character_tf_idf
character_tf_idf %>%
filter(character == "Dwight") %>%
head(20)
character_tf_idf %>%
filter(character == "Michael") %>%
head(20)
character_tf_idf %>%
filter(character == "Michael") %>%
arrange(desc(n)) %>%
head(20)
character_tf_idf %>%
filter(character == "Michael") %>%
#  arrange(desc(n)) %>%
head(20)
character_tf_idf %>%
filter(character == "Michael") %>%
head(20)
knitr::opts_chunk$set(echo = TRUE)
office_ratings %>%
group_by(name) %>%
summarize(imdb_rating = mean(imdb_rating))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(schrute)
theme_set(theme_light())
as_tibble(theoffice)
theoffice %>%  dplyr::filter(season == 1) %>%
dplyr::filter(episode == 1) %>%
dplyr::slice(1:3)
office_transcripts <- as_tibble(theoffice) %>%
mutate(season = as.integer(season),
episode = as.integer(episode)) %>%
mutate(character = str_remove_all(character, '"')) %>%
mutate(name = str_to_lower(str_remove_all(episode_name, "\\.| \\(Part.*")))
office_ratings <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-17/office_ratings.csv') %>%
mutate(name = str_to_lower(str_remove_all(title, "\\.| \\(Part.*|\\: Part.*")))
office_ratings %>%
mutate(title = fct_inorder(title)) %>%
ggplot(aes(title, imdb_rating)) +
geom_line(group = 1) +
geom_point(aes(color = factor(season))) +
geom_text(aes(label = title), check_overlap = TRUE, hjust=1) +
theme(axis.text.x = element_blank(), panel.grid.major.x = element_blank(),
legend.position = "none")
library(ggrepel)
office_ratings %>%
mutate(title = fct_inorder(title)) %>%
ggplot(aes(title, imdb_rating)) +
geom_line(group = 1) +
geom_point(aes(color = factor(season))) +
geom_text(aes(label = title), check_overlap = TRUE, hjust=1) +
theme(axis.text.x = element_blank(), panel.grid.major.x = element_blank(),
legend.position = "none")
library(ggrepel)
office_ratings %>%
group_by(season) %>%
summarize(avg_rating = mean(imdb_rating)) %>%
ggplot(aes(season, avg_rating)) +
geom_line() +
scale_x_continuous(breaks = 1:9)
office_ratings %>%
mutate(title = fct_inorder(title),
episode_number = row_number()) %>%
ggplot(aes(episode_number, imdb_rating)) +
geom_line() +
geom_smooth() +
geom_point(aes(color = factor(season), size = total_votes)) +
geom_text(aes(label = title), check_overlap = TRUE, hjust = 1) +
expand_limits(x = -10) +
theme(panel.grid.major.x = element_blank(),
legend.position = "none") +
labs(x = "Episode number",
y = "IMDB Rating",
title = "Popularity of The Office episodes over time",
subtitle = "Color represents season, size represents # of ratings")
office_ratings %>%
arrange(desc(imdb_rating)) %>%
mutate(title = paste0(season, ".", episode, " ", title),
title = fct_reorder(title, imdb_rating)) %>%
head(20) %>%
ggplot(aes(title, imdb_rating, color = factor(season), size = total_votes)) +
geom_point() +
coord_flip() +
labs(color = "Season",
title = "Most popular episodes of The Office")
library(tidytext)
transcript_words <-office_transcripts %>%
select(-text_w_direction) %>%
unnest_tokens(word, text)
transcript_words
blacklist <- c("yeah", "hey", "uh", "gonna")
blacklist_characters <- c("Everyone", "All", "Both", "Guy", "Girl", "Group")
transcript_words <- office_transcripts %>%
group_by(character) %>%
filter(n() >= 100,
n_distinct(episode_name) > 2) %>%
ungroup() %>%
select(-text_w_direction) %>%
unnest_tokens(word, text) %>%
anti_join(stop_words, by = "word") %>%
filter(!word %in% blacklist,
!character %in% blacklist_characters)
transcript_words
character_tf_idf <- transcript_words %>%
add_count(word) %>%
filter(n >= 20) %>%
count(word, character) %>%
bind_tf_idf(word, character, n) %>%
arrange(desc(tf_idf))
character_tf_idf
character_tf_idf %>%
filter(character == "Michael") %>%
head(20)
character_tf_idf %>%
filter(character %in% c("Dwight", "Jim", "Michael", "Pam")) %>%
group_by(character) %>%
top_n(10, tf_idf) %>%
ungroup() %>%
mutate(word = reorder_within(word, tf_idf, character)) %>%
ggplot(aes(word, tf_idf)) +
geom_col() +
coord_flip() +
scale_x_reordered() +
facet_wrap(~ character, scales = "free_y") +
labs(x = "",
y = "TF-IDF of character-word pairs")
ratings_summarized <- office_ratings %>%
group_by(name) %>%
summarize(imdb_rating = mean(imdb_rating))
ratings_summarized <- office_ratings %>%
group_by(name) %>%
summarize(imdb_rating = mean(imdb_rating))
character_lines_ratings <- office_transcripts %>%
filter(!character %in% blacklist_characters) %>%
count(character, name) %>%
group_by(character) %>%
filter(sum(n) >= 50,
n() >= 5) %>%
inner_join(ratings_summarized, by = "name")
character_lines_ratings %>%
summarize(avg_rating = mean(imdb_rating),
nb_episodes = n()) %>%
arrange(desc(avg_rating)) %>%
View()
office_ratings %>%
group_by(name) %>%
summarize(imdb_rating = mean(imdb_rating))
library(tidytuesdayR)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidytuesdayR)
library(scales)
theme_set(theme_light())
tt <- tt_load("2021-04-06")
tt$forest %>%
count(entity, sort = TRUE) %>%
View()
?tt
tt
tt$forest %>%
count(entity, sort = TRUE) %>%
View()
tt$forest
forest_area %>%
filter(entity == "United States") %>%
ggplot(aes(year, forest_area)) +
geom_line() +
expand_limits(y = 0)
forest_area <- tt$forest_area
forest_area %>%
filter(entity == "United States") %>%
ggplot(aes(year, forest_area)) +
geom_line() +
expand_limits(y = 0)
View(forest_area)
forest_area %>% table(code)
table(forest_area$code)
skimr::skim(forest_area)
forest_area %>% filter(code == "")
forest_area %>% filter(code == " ")
forest_area %>% filter(code == NA())
forest_area %>% filter(code == NA
forest_area %>% filter(code == NA)
forest_area %>% filter(is.na(code))
forest_area %>% filter(is.na(code)) %>% View()
tt$forest_area %>%
filter(str_length(code) == 3,
year >= 1992) %>%
rename(country = entity)
forest_area_country <- tt$forest_area %>%
filter(str_length(code) == 3,
year >= 1992) %>%
rename(country = entity) %>%
mutate(forest_area = forest_area / 100)
View(forest_area_country)
forest <- tt$forest %>%
filter(str_length(code) == 3) %>%
rename(country = entity)
View(forest)
forest_area_country %>%
filter(country %in% c("United States", "Canada", "China", "India",
"Senegal", "Germany", "Brazil", "Poland")) %>%
mutate(country = fct_reorder(country, -forest_area)) %>%
ggplot(aes(year, forest_area, color = country)) +
geom_line() +
scale_y_continuous(labels = percent) +
expand_limits(y = 0) +
labs(x = "Year",
y = "% of global forest area")
forest_area_country %>%
filter(country %in% c("United States", "Canada", "China", "India",
"Senegal", "Germany", "Brazil", "Poland")) %>%
mutate(country = fct_reorder(country, forest_area)) %>%
ggplot(aes(year, forest_area, color = country)) +
geom_line() +
scale_y_continuous(labels = percent) +
expand_limits(y = 0) +
labs(x = "Year",
y = "% of global forest area")
forest_area_country %>%
filter(country %in% c("United States", "Canada", "China", "India",
"Senegal", "Germany", "Brazil", "Poland")) %>%
mutate(country = fct_reorder(country, -forest_area)) %>%
ggplot(aes(year, forest_area, color = country)) +
geom_line() +
scale_y_continuous(labels = percent) +
expand_limits(y = 0) +
labs(x = "Year",
y = "% of global forest area")
forest_area_country %>%
#filter(country %in% c("United States", "Canada", "China", "India",
"Senegal", "Germany", "Brazil", "Poland")) %>%
top_n(country, 10, wt = forest_area) %>%
mutate(country = fct_reorder(country, -forest_area)) %>%
ggplot(aes(year, forest_area, color = country)) +
geom_line() +
scale_y_continuous(labels = percent) +
expand_limits(y = 0) +
labs(x = "Year",
y = "% of global forest area")
forest_area_country %>%
#  filter(country %in% c("United States", "Canada", "China", "India", "Senegal", "Germany", "Brazil", "Poland")) %>%
top_n(country, 10, wt = forest_area) %>%
mutate(country = fct_reorder(country, -forest_area)) %>%
ggplot(aes(year, forest_area, color = country)) +
geom_line() +
scale_y_continuous(labels = percent) +
expand_limits(y = 0) +
labs(x = "Year",
y = "% of global forest area")
forest_area_country %>%
#  filter(country %in% c("United States", "Canada", "China", "India", "Senegal", "Germany", "Brazil", "Poland")) %>%
top_n(country, 10, wt = forest_area) %>%
mutate(country = fct_reorder(country, -forest_area)) %>%
ggplot(aes(year, forest_area, color = country)) +
geom_line() +
scale_y_continuous(labels = percent) +
expand_limits(y = 0) +
labs(x = "Year",
y = "% of global forest area")
forest_area_country %>%
#  filter(country %in% c("United States", "Canada", "China", "India", "Senegal", "Germany", "Brazil", "Poland")) %>%
top_n(country, n= 10, wt = forest_area) %>%
mutate(country = fct_reorder(country, -forest_area)) %>%
ggplot(aes(year, forest_area, color = country)) +
geom_line() +
scale_y_continuous(labels = percent) +
expand_limits(y = 0) +
labs(x = "Year",
y = "% of global forest area")
?top_n
forest_area_country %>%
#  filter(country %in% c("United States", "Canada", "China", "India", "Senegal", "Germany", "Brazil", "Poland")) %>%
slice_max(country, n = 10, order_by = forest_area) %>%
mutate(country = fct_reorder(country, -forest_area)) %>%
ggplot(aes(year, forest_area, color = country)) +
geom_line() +
scale_y_continuous(labels = percent) +
expand_limits(y = 0) +
labs(x = "Year",
y = "% of global forest area")
forest_area_country %>%
#  filter(country %in% c("United States", "Canada", "China", "India", "Senegal", "Germany", "Brazil", "Poland")) %>%
slice_max(country, n = 10, order_by = forest_area)
forest_area_country
forest_area_country %>%
filter(country %in% c("United States", "Canada", "China", "India", "Senegal", "Germany", "Brazil", "Poland")) %>%
mutate(country = fct_reorder(country, -forest_area)) %>%
ggplot(aes(year, forest_area, color = country)) +
geom_line() +
scale_y_continuous(labels = percent) +
expand_limits(y = 0) +
labs(x = "Year",
y = "% of global forest area")
forest_area_country %>%
mutate(country = fct_lump(country, 9, w = forest_area)) %>%
group_by(country, year) %>%
summarize(forest_area = sum(forest_area),
.groups = "drop") %>%
mutate(country = fct_reorder(country, -forest_area)) %>%
ggplot(aes(year, forest_area, fill = country)) +
geom_area() +
scale_y_continuous(labels = percent) +
expand_limits(y = 0) +
labs(x = "Year",
y = "% of global forest area")
forest_area_country %>%
mutate(country = fct_lump(country, 9, w = forest_area)) %>%
group_by(country, year) %>%
summarize(forest_area = sum(forest_area),
.groups = "drop")
forest_area_country %>%
mutate(country = fct_lump(country, 9, w = forest_area))
forest_area_country %>%
mutate(country = fct_lump(country, 9, w = forest_area)) %>%
group_by(country, year)
forest_area_country %>%
mutate(country = fct_lump(country, 9, w = forest_area)) %>%
group_by(country, year) %>%
summarize(forest_area = sum(forest_area),
.groups = "drop") %>%
mutate(country = fct_reorder(country, -forest_area))
forest_area_country %>%
mutate(country = fct_lump(country, 9, w = forest_area)) %>%
group_by(country, year) %>%
summarize(forest_area = sum(forest_area),
.groups = "drop") %>%
mutate(country = fct_reorder(country, -forest_area)) %>%
ggplot(aes(year, forest_area, fill = country)) +
geom_area() +
scale_y_continuous(labels = percent) +
expand_limits(y = 0) +
labs(x = "Year",
y = "% of global forest area")
