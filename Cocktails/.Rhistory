mutate(ingredient = fct_reorder(ingredient, n)) %>%
ggplot(aes(n, ingredient)) +
geom_col() +
labs(title = "Most common ingredients in Mr Boston recipes")
cocktails_parsed_filtered %>%
count(ingredient, sort = TRUE) %>%
head(20) %>%
mutate(ingredient = fct_reorder(ingredient, n)) %>%
ggplot(aes(x = ingredient, y = n)) +
geom_dotplot(binaxis = "y", stackdir = "center") +
coord_flip()
labs(title = "Most common ingredients in Mr Boston recipes")
cocktails_parsed_filtered %>%
count(ingredient, sort = TRUE) %>%
head(20) %>%
mutate(ingredient = fct_reorder(ingredient, n)) %>%
ggplot(aes(n, ingredient)) +
geom_col() +
labs(title = "Most common ingredients in Mr Boston recipes")
cocktails_parsed_filtered %>%
count(ingredient, sort = TRUE) %>%
head(20) %>%
mutate(ingredient = fct_reorder(ingredient, n)) %>%
ggplot(aes(x = ingredient, y = n)) +
geom_dotplot(binaxis = "y", stackdir = "center") +
coord_flip() +
labs(title = "Most common ingredients in Mr Boston recipes")
cocktails_parsed_filtered %>%
distinct(name, category) %>%
count(category, sort = TRUE)
n_recipes <- n_distinct(cocktails_parsed_filtered$name)
cocktails_parsed_filtered %>%
count(category, ingredient, sort = TRUE) %>%
mutate(category = fct_lump(category, 4),
ingredient = fct_lump(ingredient, 20)) %>%
filter(ingredient != "Other") %>%
mutate(ingredient = fct_reorder(ingredient, n, sum)) %>%
ggplot(aes(n/n_recipes, ingredient, fill = category)) +
geom_col() +
scale_x_continuous(labels = percent_format()) +
labs(title = "Most common ingredients in Mr Boston recipes",
x = "% of all recipes",
y = "Ingredient",
fill = "Category")
library(widyr)
library(tidytext)
ingredient_pairs <- mr_boston %>%
add_count(ingredient)
library(widyr)
library(tidytext)
ingredient_pairs <- cocktails_parsed_filtered %>%
add_count(ingredient) %>%   # like group_by then count
filter(n >= 5) %>% # filter only for ingredients that appear in min. 10 recipes
pairwise_cor(ingredient, name, sort = TRUE)
ingredient_pairs
ingredient_pairs <- cocktails_parsed_filtered %>%
add_count(ingredient)
cocktails_parsed_filtered %>%
add_count(ingredient)
cocktails_parsed_filtered %>%
add_count(ingredient) %>%   # like group_by then count
filter(n >= 5)
library(widyr)
library(tidytext)
ingredient_pairs <- cocktails_parsed_filtered %>%
add_count(ingredient) %>%   # like group_by then count
filter(n >= 5) %>% # filter only for ingredients that appear in min. 10 recipes
pairwise_cor(ingredient, name, sort = TRUE)
ingredient_pairs
ingredient_pairs %>%
filter(item1 == "Gin") %>%
head(10) %>%
mutate(item2 = fct_reorder(item2, correlation)) %>%
ggplot(aes(correlation, item2)) +
geom_col() +
labs(title = "What ingredients are most correlated with gin?")
ingredient_pairs %>%
filter(item1 == "Gin") %>%
head(20) %>%
mutate(item2 = fct_reorder(item2, correlation)) %>%
ggplot(aes(correlation, item2)) +
geom_col() +
labs(title = "What ingredients are most correlated with gin?")
ingredient_pairs %>%
filter(item1 == "gin") %>%
head(20) %>%
mutate(item2 = fct_reorder(item2, correlation)) %>%
ggplot(aes(correlation, item2)) +
geom_col() +
labs(title = "What ingredients are most correlated with gin?")
ingredient_pairs %>%
filter(item1 == "gin") %>%
head(10) %>%
mutate(item2 = fct_reorder(item2, correlation)) %>%
ggplot(aes(correlation, item2)) +
geom_col() +
labs(title = "What ingredients are most correlated with gin?")
ingredient_pairs %>%
filter(item1 %in% c("Gin", "Tequila",  "Bourbon whiskey", "Campari", "Sweet Vermouth", "Juice of Orange")) %>%
group_by(item1) %>%
top_n(10, correlation) %>%
ungroup() %>%   # wasn't included in David's script - need to include
mutate(item2 = reorder_within(item2, correlation, item1)) %>%
ggplot(aes(correlation, item2)) +
geom_col() +
facet_wrap(~ item1, scales = "free_y") +
scale_y_reordered() +
labs(title = "What ingredients are most correlated with particular ingreidents?")
ingredient_pairs %>%
filter(item1 %in% c("gin", "tequila",  "Bourbon whiskey", "Campari", "sweet vermouth", "orange juice")) %>%
group_by(item1) %>%
top_n(10, correlation) %>%
ungroup() %>%   # wasn't included in David's script - need to include
mutate(item2 = reorder_within(item2, correlation, item1)) %>%
ggplot(aes(correlation, item2)) +
geom_col() +
facet_wrap(~ item1, scales = "free_y") +
scale_y_reordered() +
labs(title = "What ingredients are most correlated with particular ingreidents?")
ingredient_pairs %>%
filter(item1 %in% c("gin", "tequila",  "bourbon whiskey", "campari", "sweet vermouth", "orange juice")) %>%
group_by(item1) %>%
top_n(10, correlation) %>%
ungroup() %>%   # wasn't included in David's script - need to include
mutate(item2 = reorder_within(item2, correlation, item1)) %>%
ggplot(aes(correlation, item2)) +
geom_col() +
facet_wrap(~ item1, scales = "free_y") +
scale_y_reordered() +
labs(title = "What ingredients are most correlated with particular ingreidents?")
cocktails_parsed_filtered %>% filter(ingredient == "campari")
ingredient_pairs %>%
filter(item1 %in% c("gin", "vodka",  "bourbon whiskey", "sweet vermouth", "orange juice")) %>%
group_by(item1) %>%
top_n(10, correlation) %>%
ungroup() %>%   # wasn't included in David's script - need to include
mutate(item2 = reorder_within(item2, correlation, item1)) %>%
ggplot(aes(correlation, item2)) +
geom_col() +
facet_wrap(~ item1, scales = "free_y") +
scale_y_reordered() +
labs(title = "What ingredients are most correlated with particular ingreidents?")
ingredient_pairs %>%
filter(item1 %in% c("gin", "vodka",  "bourbon whiskey", "orange juice")) %>%
group_by(item1) %>%
top_n(10, correlation) %>%
ungroup() %>%   # wasn't included in David's script - need to include
mutate(item2 = reorder_within(item2, correlation, item1)) %>%
ggplot(aes(correlation, item2)) +
geom_col() +
facet_wrap(~ item1, scales = "free_y") +
scale_y_reordered() +
labs(title = "What ingredients are most correlated with particular ingreidents?")
ingredient_pairs %>%
filter(item1 %in% c("gin", "vodka",  "bourbon whiskey", "orange juice")) %>%
group_by(item1) %>%
top_n(8, correlation) %>%
ungroup() %>%   # wasn't included in David's script - need to include
mutate(item2 = reorder_within(item2, correlation, item1)) %>%
ggplot(aes(correlation, item2)) +
geom_col() +
facet_wrap(~ item1, scales = "free_y") +
scale_y_reordered() +
labs(title = "What ingredients are most correlated with particular ingreidents?")
ingredient_pairs %>%
filter(item1 %in% c("gin", "vodka",  "bourbon whiskey", "lemon juice")) %>%
group_by(item1) %>%
top_n(8, correlation) %>%
ungroup() %>%   # wasn't included in David's script - need to include
mutate(item2 = reorder_within(item2, correlation, item1)) %>%
ggplot(aes(correlation, item2)) +
geom_col() +
facet_wrap(~ item1, scales = "free_y") +
scale_y_reordered() +
labs(title = "What ingredients are most correlated with particular ingreidents?")
top_cors <- ingredient_pairs %>%
head(150)
ingredient_info <- ingredients_summarized %>%
filter(ingredient %in% top_cors$item1)
ingredients_summarized <- cocktails_parsed_filtered %>%
group_by(name) %>%
mutate(percentile = row_number() / n()) %>%  # account for fact that some recipes have many ingredients and some don't
ungroup() %>%
group_by(ingredient) %>%
summarize(n = n(),
n_with_oz = sum(!is.na(oz)),
avg_position = mean(percentile),
avg_serving = mean(oz, na.rm = TRUE)) %>%
arrange(desc(n))
ingredients_summarized
top_cors <- ingredient_pairs %>%
head(150)
ingredient_info <- cocktails_parsed_filtered %>%
filter(ingredient %in% top_cors$item1)
# ~ 35 mins
top_cors %>%
graph_from_data_frame(vertices = ingredient_info) %>%
ggraph(layout = "fr") +
geom_edge_link() +
geom_node_text(aes(label = name), repel = TRUE) +
geom_node_point(aes(size = 1.1* n)) +
geom_node_point(aes(size = n, color = avg_position)) +
scale_color_gradient2(low = "red", high = "blue", midpoint = .5,
labels = scales::percent_format()) +
labs(size = "# of recipes",
color = "Avg position in drink",
title = "The universe of cocktail ingredients",
subtitle = "Connected ingredients tend to appear in the same drink. Red ingredients are early in the recipe, blue tend to be later")
library(ggraph)
library(igraph)
top_cors <- ingredient_pairs %>%
head(150)
ingredient_info <- cocktails_parsed_filtered %>%
filter(ingredient %in% top_cors$item1)
# ~ 35 mins
top_cors %>%
graph_from_data_frame(vertices = ingredient_info) %>%
ggraph(layout = "fr") +
geom_edge_link() +
geom_node_text(aes(label = name), repel = TRUE) +
geom_node_point(aes(size = 1.1* n)) +
geom_node_point(aes(size = n, color = avg_position)) +
scale_color_gradient2(low = "red", high = "blue", midpoint = .5,
labels = scales::percent_format()) +
labs(size = "# of recipes",
color = "Avg position in drink",
title = "The universe of cocktail ingredients",
subtitle = "Connected ingredients tend to appear in the same drink. Red ingredients are early in the recipe, blue tend to be later")
library(ggraph)
library(igraph)
library(ggrepel)
top_cors <- ingredient_pairs %>%
head(150)
ingredient_info <- cocktails_parsed_filtered %>%
filter(ingredient %in% top_cors$item1)
# ~ 35 mins
top_cors %>%
graph_from_data_frame(vertices = ingredient_info) %>%
ggraph(layout = "fr") +
geom_edge_link() +
geom_node_text(aes(label = name), repel = TRUE) +
geom_node_point(aes(size = 1.1* n)) +
geom_node_point(aes(size = n, color = avg_position)) +
scale_color_gradient2(low = "red", high = "blue", midpoint = .5,
labels = scales::percent_format()) +
labs(size = "# of recipes",
color = "Avg position in drink",
title = "The universe of cocktail ingredients",
subtitle = "Connected ingredients tend to appear in the same drink. Red ingredients are early in the recipe, blue tend to be later")
View(ingredient_info)
ingredient_info <- cocktails_parsed_filtered %>%
filter(ingredient %in% top_cors$item1) %>%
distinct()
View(ingredient_info)
View(cocktails_parsed_filtered)
ingredients_summarized <- cocktails_parsed_filtered %>%
group_by(name) %>%
mutate(percentile = row_number() / n()) %>%  # account for fact that some recipes have many ingredients and some don't
ungroup() %>%
group_by(ingredient) %>%
summarize(n = n(),
n_with_measure = sum(!is.na(measure_number)),
avg_position = mean(percentile),
avg_serving = mean(measure_number, na.rm = TRUE)) %>%
arrange(desc(n))
#ingredients_summarized
library(ggraph)
library(igraph)
library(ggrepel)
top_cors <- ingredient_pairs %>%
head(150)
ingredient_info <- ingredients_summarized %>%
filter(ingredient %in% top_cors$item1) %>%
distinct()
# ~ 35 mins
top_cors %>%
graph_from_data_frame(vertices = ingredient_info) %>%
ggraph(layout = "fr") +
geom_edge_link() +
geom_node_text(aes(label = name), repel = TRUE) +
geom_node_point(aes(size = 1.1* n)) +
geom_node_point(aes(size = n, color = avg_position)) +
scale_color_gradient2(low = "red", high = "blue", midpoint = .5,
labels = scales::percent_format()) +
labs(size = "# of recipes",
color = "Avg position in drink",
title = "The universe of cocktail ingredients",
subtitle = "Connected ingredients tend to appear in the same drink. Red ingredients are early in the recipe, blue tend to be later")
# ~ 35 mins
top_cors %>%
graph_from_data_frame(vertices = ingredient_info) %>%
ggraph(layout = "fr") +
geom_edge_link() +
geom_node_text(aes(label = name), repel = TRUE) +
geom_node_point(aes(size = 1.1* n)) +
geom_node_point(aes(size = n, color = avg_position)) +
scale_color_gradient2(low = "red", high = "blue", midpoint = .5,
labels = scales::percent_format()) +
labs(size = "# of recipes",
color = "Avg position in drink",
title = "The universe of cocktail ingredients",
subtitle = "Connected ingredients tend to appear in the same drink. Red ingredients are early in the recipe, \n blue tend to be later")
# ~ 35 mins
top_cors %>%
graph_from_data_frame(vertices = ingredient_info) %>%
ggraph(layout = "fr") +
geom_edge_link() +
geom_node_text(aes(label = name), repel = TRUE) +
geom_node_point(aes(size = 1.1* n)) +
geom_node_point(aes(size = n, color = avg_position)) +
scale_color_gradient2(low = "red", high = "blue", midpoint = .5,
labels = scales::percent_format()) +
labs(size = "# of recipes",
color = "Avg position in drink",
title = "The universe of cocktail ingredients",
subtitle = "Connected ingredients tend to appear in the same drink. Red ingredients are early in the recipe, \n blue ingredients tend to be later")
ingredients_summarized <- cocktails_parsed_filtered %>%
group_by(name) %>%
mutate(percentile = row_number() / n()) %>%  # account for fact that some recipes have many ingredients and some don't
ungroup() %>%
group_by(ingredient) %>%
summarize(n = n(),
n_with_measure = sum(!is.na(measure_number)),
avg_position = mean(percentile),
avg_serving = mean(measure_number, na.rm = TRUE)) %>%
arrange(desc(n))
#ingredients_summarized
library(ggraph)
library(igraph)
library(ggrepel)
top_cors <- ingredient_pairs %>%
head(100)
ingredient_info <- ingredients_summarized %>%
filter(ingredient %in% top_cors$item1) %>%
distinct()
# ~ 35 mins
top_cors %>%
graph_from_data_frame(vertices = ingredient_info) %>%
ggraph(layout = "fr") +
geom_edge_link() +
geom_node_text(aes(label = name), repel = TRUE) +
geom_node_point(aes(size = 1.1* n)) +
geom_node_point(aes(size = n, color = avg_position)) +
scale_color_gradient2(low = "red", high = "blue", midpoint = .5,
labels = scales::percent_format()) +
labs(size = "# of recipes",
color = "Avg position in drink",
title = "The universe of cocktail ingredients",
subtitle = "Connected ingredients tend to appear in the same drink. Red ingredients are early in the recipe, \n blue ingredients tend to be later")
ingredients_summarized <- cocktails_parsed_filtered %>%
group_by(name) %>%
mutate(percentile = row_number() / n()) %>%  # account for fact that some recipes have many ingredients and some don't
ungroup() %>%
group_by(ingredient) %>%
summarize(n = n(),
n_with_measure = sum(!is.na(measure_number)),
avg_position = mean(percentile),
avg_serving = mean(measure_number, na.rm = TRUE)) %>%
arrange(desc(n))
#ingredients_summarized
library(ggraph)
library(igraph)
library(ggrepel)
top_cors <- ingredient_pairs %>%
head(80)
ingredient_info <- ingredients_summarized %>%
filter(ingredient %in% top_cors$item1) %>%
distinct()
# ~ 35 mins
top_cors %>%
graph_from_data_frame(vertices = ingredient_info) %>%
ggraph(layout = "fr") +
geom_edge_link() +
geom_node_text(aes(label = name), repel = TRUE) +
geom_node_point(aes(size = 1.1* n)) +
geom_node_point(aes(size = n, color = avg_position)) +
scale_color_gradient2(low = "red", high = "blue", midpoint = .5,
labels = scales::percent_format()) +
labs(size = "# of recipes",
color = "Avg position in drink",
title = "The universe of cocktail ingredients",
subtitle = "Connected ingredients tend to appear in the same drink. Red ingredients are early in the recipe, \n blue ingredients tend to be later")
ingredients_summarized <- cocktails_parsed_filtered %>%
group_by(name) %>%
mutate(percentile = row_number() / n()) %>%  # account for fact that some recipes have many ingredients and some don't
ungroup() %>%
group_by(ingredient) %>%
summarize(n = n(),
n_with_measure = sum(!is.na(measure_number)),
avg_position = mean(percentile),
avg_serving = mean(measure_number, na.rm = TRUE)) %>%
arrange(desc(n))
#ingredients_summarized
library(ggraph)
library(igraph)
library(ggrepel)
top_cors <- ingredient_pairs %>%
head(50)
ingredient_info <- ingredients_summarized %>%
filter(ingredient %in% top_cors$item1) %>%
distinct()
# ~ 35 mins
top_cors %>%
graph_from_data_frame(vertices = ingredient_info) %>%
ggraph(layout = "fr") +
geom_edge_link() +
geom_node_text(aes(label = name), repel = TRUE) +
geom_node_point(aes(size = 1.1* n)) +
geom_node_point(aes(size = n, color = avg_position)) +
scale_color_gradient2(low = "red", high = "blue", midpoint = .5,
labels = scales::percent_format()) +
labs(size = "# of recipes",
color = "Avg position in drink",
title = "The universe of cocktail ingredients",
subtitle = "Connected ingredients tend to appear in the same drink. Red ingredients are early in the recipe, \n blue ingredients tend to be later")
ingredients_summarized <- cocktails_parsed_filtered %>%
group_by(name) %>%
mutate(percentile = row_number() / n()) %>%  # account for fact that some recipes have many ingredients and some don't
ungroup() %>%
group_by(ingredient) %>%
summarize(n = n(),
n_with_measure = sum(!is.na(measure_number)),
avg_position = mean(percentile),
avg_serving = mean(measure_number, na.rm = TRUE)) %>%
arrange(desc(n))
#ingredients_summarized
library(ggraph)
library(igraph)
library(ggrepel)
top_cors <- ingredient_pairs %>%
head(60)
ingredient_info <- ingredients_summarized %>%
filter(ingredient %in% top_cors$item1) %>%
distinct()
# ~ 35 mins
top_cors %>%
graph_from_data_frame(vertices = ingredient_info) %>%
ggraph(layout = "fr") +
geom_edge_link() +
geom_node_text(aes(label = name), repel = TRUE) +
geom_node_point(aes(size = 1.1* n)) +
geom_node_point(aes(size = n, color = avg_position)) +
scale_color_gradient2(low = "red", high = "blue", midpoint = .5,
labels = scales::percent_format()) +
labs(size = "# of recipes",
color = "Avg position in drink",
title = "The universe of cocktail ingredients",
subtitle = "Connected ingredients tend to appear in the same drink. Red ingredients are early in the recipe, \n blue ingredients tend to be later")
ingredients_summarized <- cocktails_parsed_filtered %>%
group_by(name) %>%
mutate(percentile = row_number() / n()) %>%  # account for fact that some recipes have many ingredients and some don't
ungroup() %>%
group_by(ingredient) %>%
summarize(n = n(),
n_with_measure = sum(!is.na(measure_number)),
avg_position = mean(percentile),
avg_serving = mean(measure_number, na.rm = TRUE)) %>%
arrange(desc(n))
#ingredients_summarized
library(ggraph)
library(igraph)
library(ggrepel)
top_cors <- ingredient_pairs %>%
head(70)
ingredient_info <- ingredients_summarized %>%
filter(ingredient %in% top_cors$item1) %>%
distinct()
# ~ 35 mins
top_cors %>%
graph_from_data_frame(vertices = ingredient_info) %>%
ggraph(layout = "fr") +
geom_edge_link() +
geom_node_text(aes(label = name), repel = TRUE) +
geom_node_point(aes(size = 1.1* n)) +
geom_node_point(aes(size = n, color = avg_position)) +
scale_color_gradient2(low = "red", high = "blue", midpoint = .5,
labels = scales::percent_format()) +
labs(size = "# of recipes",
color = "Avg position in drink",
title = "The universe of cocktail ingredients",
subtitle = "Connected ingredients tend to appear in the same drink. Red ingredients are early in the recipe, \n blue ingredients tend to be later")
tidied_pca <- tidy(pca_prep, 2)
tidied_pca
tidied_pca %>%
filter(component %in% paste0("PC", 1:5)) %>%
mutate(component = fct_inorder(component)) %>%
ggplot(aes(value, terms, fill = terms)) +
geom_col(show.legend = FALSE) +
facet_wrap(~component, nrow = 1) +
labs(y = NULL)
library(tidytext)
tidied_pca %>%
filter(component %in% paste0("PC", 1:4)) %>%
group_by(component) %>%
top_n(8, abs(value)) %>%
ungroup() %>%
mutate(terms = reorder_within(terms, by = abs(value), within = component)) %>%  # from tidytext package - reorders column before plotting with faceting, such that the values are ordered within each facet...needs scale_x_reordered or scale_y_reordered to be used laster
ggplot(aes(abs(value), terms, fill = value > 0)) +
geom_col() +
facet_wrap(~component, , scales = "free_y") +
scale_y_reordered() +  # see earlier comment
labs(
x = "Absolute value of contribution",
y = NULL, fill = "Positive?"
)
?percent_format
library(scales)
juice(pca_prep) %>%  # get info from processed dataset
ggplot(aes(PC1, PC2, label = name)) +
geom_point(aes(color = category), alpha = 0.7, size = 2) +
geom_text(check_overlap = TRUE, hjust = "inward") +  # so that labels dont overlap
labs(color = NULL)
